{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\BG-ChangingApp\\\\usesate2\\\\src\\\\example.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const increment = () => {\n    setCount(count + 1);\n    setCount(count + 3);\n    //which value will be printed as a final state ?\n    //it shows the async behaviour of useState\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n_s(Example, \"RpyMek13f3iNeQO0Gs9DEYmHKoY=\");\n_c = Example;\nexport default Example;\n// in the above example we are updating the count value twice\n// we should know that setCount is not synchronous it does update the value immedietly instead it enques all the \n//updated values  in the call back queue.After execution of the whole function the call stack will be emptied.\n//then the react re renders and then usestate will have the last updated value from the queue.\n\nexport const Example2 = () => {\n  _s2();\n  console.log(\"re-rendered\");\n  const [user, setUser] = useState({\n    name: \"xyz\"\n  });\n  const updateName = () => {\n    setUser({\n      name: \"xyz\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateName,\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n//here both the states are same but we still re render because  they are not refrencially equal .Both are stored \n//on the different memory locations so are treated as seperated updates.\n_s2(Example2, \"5Yev2WZzDLVjVm0MNw2gEfZhM1Q=\");\n_c2 = Example2;\nvar _c, _c2;\n$RefreshReg$(_c, \"Example\");\n$RefreshReg$(_c2, \"Example2\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Example","_s","count","setCount","increment","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Example2","_s2","console","log","user","setUser","name","updateName","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/BG-ChangingApp/usesate2/src/example.js"],"sourcesContent":["import { useState } from \"react\"\r\n\r\nconst Example =()=>{\r\n    const [count,setCount]=useState(0);\r\n    const  increment=()=>{\r\n        setCount(count+1);\r\n        setCount(count+3);\r\n        //which value will be printed as a final state ?\r\n        //it shows the async behaviour of useState\r\n    } \r\n    return (\r\n        <div>\r\n            <h1>Counter</h1>\r\n            <h1>{count}</h1>\r\n            <button onClick={increment}>increment</button>\r\n            </div>\r\n    )\r\n}\r\nexport default Example;\r\n// in the above example we are updating the count value twice\r\n// we should know that setCount is not synchronous it does update the value immedietly instead it enques all the \r\n//updated values  in the call back queue.After execution of the whole function the call stack will be emptied.\r\n//then the react re renders and then usestate will have the last updated value from the queue.\r\n\r\n\r\nexport const Example2=()=>{\r\n\r\n    console.log(\"re-rendered\");\r\n    const [user,setUser]=useState({name:\"xyz\"});\r\n    const updateName=()=>{\r\n        setUser({name:\"xyz\"});\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{user}</h1>\r\n            <button onClick={updateName}>click</button>\r\n        </div>\r\n    )\r\n}\r\n//here both the states are same but we still re render because  they are not refrencially equal .Both are stored \r\n//on the different memory locations so are treated as seperated updates."],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,OAAO,GAAEA,CAAA,KAAI;EAAAC,EAAA;EACf,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACN,QAAQ,CAAC,CAAC,CAAC;EAClC,MAAOO,SAAS,GAACA,CAAA,KAAI;IACjBD,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAC;IACjBC,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAC;IACjB;IACA;EACJ,CAAC;EACD,oBACIH,OAAA;IAAAM,QAAA,gBACIN,OAAA;MAAAM,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBV,OAAA;MAAAM,QAAA,EAAKH;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBV,OAAA;MAAQW,OAAO,EAAEN,SAAU;MAAAC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAElB,CAAC;AAAAR,EAAA,CAfKD,OAAO;AAAAW,EAAA,GAAPX,OAAO;AAgBb,eAAeA,OAAO;AACtB;AACA;AACA;AACA;;AAGA,OAAO,MAAMY,QAAQ,GAACA,CAAA,KAAI;EAAAC,GAAA;EAEtBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC1B,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACpB,QAAQ,CAAC;IAACqB,IAAI,EAAC;EAAK,CAAC,CAAC;EAC3C,MAAMC,UAAU,GAACA,CAAA,KAAI;IACjBF,OAAO,CAAC;MAACC,IAAI,EAAC;IAAK,CAAC,CAAC;EACzB,CAAC;EACD,oBACInB,OAAA;IAAAM,QAAA,gBACIN,OAAA;MAAAM,QAAA,EAAKW;IAAI;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACfV,OAAA;MAAQW,OAAO,EAAES,UAAW;MAAAd,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd,CAAC;AACD;AACA;AAAAI,GAAA,CAfaD,QAAQ;AAAAQ,GAAA,GAARR,QAAQ;AAAA,IAAAD,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}